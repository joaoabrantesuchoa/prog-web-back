openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JOAOABRANTESUCHOA/projeto-extensao/1.0.0
info:
  version: "1.0.0"
  title: home-iot-api
  description: The API for the EatBacon IOT project
paths:
  /login:
    post:
      tags:
        - Autenticação
      summary: Realiza o login de um usuário
      description: Autentica o usuário e retorna um token JWT se as credenciais estiverem corretas.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token JWT para autenticação
        "401":
          description: Credenciais inválidas

  /logout:
    post:
      tags:
        - Autenticação
      summary: Realiza o logout do usuário
      description: Invalida o token de autenticação do usuário.
      operationId: logoutUser
      responses:
        "200":
          description: Logout realizado com sucesso

  /register:
    post:
      tags:
        - Autenticação
      summary: Registra um novo usuário
      description: Cria uma nova conta de usuário.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nome:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                role:
                  type: string
                  enum:
                    - Professor
                    - Aluno
      responses:
        "201":
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usuario"
        "400":
          description: Requisição inválida ou e-mail já registrado

  /alunos:
    get:
      tags:
        - Aluno
      description: Retorna todos os alunos registrados
      operationId: getAlunos
      responses:
        "200":
          description: Lista de todos os alunos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Aluno"
    post:
      tags:
        - Aluno
      description: Cria um novo aluno
      operationId: createAluno
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlunoInput"
      responses:
        "201":
          description: Aluno criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aluno"
  /alunos/{id}:
    get:
      tags:
        - Aluno
      description: Obtém um aluno pelo ID
      operationId: getAlunoById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Detalhes do aluno
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aluno"
    put:
      tags:
        - Aluno
      description: Atualiza um aluno pelo ID
      operationId: updateAluno
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AlunoInput"
      responses:
        "200":
          description: Aluno atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Aluno"
    delete:
      tags:
        - Aluno
      description: Exclui um aluno pelo ID
      operationId: deleteAluno
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Aluno excluído com sucesso

  /professores:
    get:
      tags:
        - Professor
      description: Retorna todos os professores registrados
      operationId: getProfessores
      responses:
        "200":
          description: Lista de todos os professores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Professor"
    post:
      tags:
        - Professor
      description: Cria um novo professor
      operationId: createProfessor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfessorInput"
      responses:
        "201":
          description: Professor criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Professor"
  /professores/{id}:
    get:
      tags:
        - Professor
      description: Obtém um professor pelo ID
      operationId: getProfessorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Detalhes do professor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Professor"
    put:
      tags:
        - Professor
      description: Atualiza um professor pelo ID
      operationId: updateProfessor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfessorInput"
      responses:
        "200":
          description: Professor atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Professor"
    delete:
      tags:
        - Professor
      description: Exclui um professor pelo ID
      operationId: deleteProfessor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Professor excluído com sucesso

  /projetos:
    get:
      tags:
        - Projeto
      description: Retorna todos os projetos registrados
      operationId: getProjetos
      responses:
        "200":
          description: Lista de todos os projetos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Projeto"
    post:
      tags:
        - Projeto
      description: Cria um novo projeto
      operationId: createProjeto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjetoInput"
      responses:
        "201":
          description: Projeto criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projeto"
  /projetos/{id}:
    get:
      tags:
        - Projeto
      description: Obtém um projeto pelo ID
      operationId: getProjetoById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Detalhes do projeto
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projeto"
    put:
      tags:
        - Projeto
      description: Atualiza um projeto pelo ID
      operationId: updateProjeto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjetoInput"
      responses:
        "200":
          description: Projeto atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Projeto"
    delete:
      tags:
        - Projeto
      description: Exclui um projeto pelo ID
      operationId: deleteProjeto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Projeto excluído com sucesso

  /registrosHora:
    get:
      tags:
        - RegistroHora
      description: Retorna todos os registros de horas
      operationId: getRegistrosHora
      responses:
        "200":
          description: Lista de todos os registros de horas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RegistroHora"
    post:
      tags:
        - RegistroHora
      description: Cria um novo registro de hora
      operationId: createRegistroHora
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistroHoraInput"
      responses:
        "201":
          description: Registro de hora criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistroHora"
  /registrosHora/{id}:
    get:
      tags:
        - RegistroHora
      description: Obtém um registro de hora pelo ID
      operationId: getRegistroHoraById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Detalhes do registro de hora
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistroHora"
    put:
      tags:
        - RegistroHora
      description: Atualiza um registro de hora pelo ID
      operationId: updateRegistroHora
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistroHoraInput"
      responses:
        "200":
          description: Registro de hora atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistroHora"
    delete:
      tags:
        - RegistroHora
      description: Exclui um registro de hora pelo ID
      operationId: deleteRegistroHora
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Registro de hora excluído com sucesso

  /atividades:
    get:
      tags:
        - Atividade
      description: Retorna todas as atividades
      operationId: getAtividades
      responses:
        "200":
          description: Lista de todas as atividades
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Atividade"
    post:
      tags:
        - Atividade
      description: Cria uma nova atividade
      operationId: createAtividade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AtividadeInput"
      responses:
        "201":
          description: Atividade criada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Atividade"
  /atividades/{id}:
    get:
      tags:
        - Atividade
      description: Obtém uma atividade pelo ID
      operationId: getAtividadeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Detalhes da atividade
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Atividade"
    put:
      tags:
        - Atividade
      description: Atualiza uma atividade pelo ID
      operationId: updateAtividade
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AtividadeInput"
      responses:
        "200":
          description: Atividade atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Atividade"
    delete:
      tags:
        - Atividade
      description: Exclui uma atividade pelo ID
      operationId: deleteAtividade
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Atividade excluída com sucesso

components:
  schemas:
    Usuario:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - Professor
            - Aluno
        professor:
          $ref: "#/components/schemas/Professor"
        aluno:
          $ref: "#/components/schemas/Aluno"
    UsuarioInput:
      type: object
      properties:
        nome:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - Professor
            - Aluno
    Professor:
      type: object
      properties:
        id:
          type: integer
        usuarioId:
          type: integer
        projetos:
          type: array
          items:
            $ref: "#/components/schemas/Projeto"
    ProfessorInput:
      type: object
      properties:
        usuarioId:
          type: integer
    Aluno:
      type: object
      properties:
        id:
          type: integer
        usuarioId:
          type: integer
        registros:
          type: array
          items:
            $ref: "#/components/schemas/RegistroHora"
        atividades:
          type: array
          items:
            $ref: "#/components/schemas/AtividadeAluno"
    AlunoInput:
      type: object
      properties:
        usuarioId:
          type: integer
    Projeto:
      type: object
      properties:
        id:
          type: integer
        titulo:
          type: string
        descricao:
          type: string
        professorId:
          type: integer
        registros:
          type: array
          items:
            $ref: "#/components/schemas/RegistroHora"
        atividades:
          type: array
          items:
            $ref: "#/components/schemas/Atividade"
    ProjetoInput:
      type: object
      properties:
        titulo:
          type: string
        descricao:
          type: string
        professorId:
          type: integer
    RegistroHora:
      type: object
      properties:
        id:
          type: integer
        alunoId:
          type: integer
        projetoId:
          type: integer
        horasTrabalhadas:
          type: integer
        dataRegistro:
          type: string
          format: date-time
    RegistroHoraInput:
      type: object
      properties:
        alunoId:
          type: integer
        projetoId:
          type: integer
        horasTrabalhadas:
          type: integer
        dataRegistro:
          type: string
          format: date-time
    Atividade:
      type: object
      properties:
        id:
          type: integer
        titulo:
          type: string
        descricao:
          type: string
        horasNecessarias:
          type: integer
        projetoId:
          type: integer
        alunos:
          type: array
          items:
            $ref: "#/components/schemas/AtividadeAluno"
    AtividadeInput:
      type: object
      properties:
        titulo:
          type: string
        descricao:
          type: string
        horasNecessarias:
          type: integer
        projetoId:
          type: integer
    AtividadeAluno:
      type: object
      properties:
        id:
          type: integer
        atividadeId:
          type: integer
        alunoId:
          type: integer
        status:
          type: string
        dataConclusao:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AtividadeAlunoInput:
      type: object
      properties:
        atividadeId:
          type: integer
        alunoId:
          type: integer
        status:
          type: string
        dataConclusao:
          type: string
          format: date-time
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
          example: everything is ok
